{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","SCRIPTS_DEFAULT","affirmJs","Function","AffirmPaymentStrategy","_paymentActionCreator","_remoteCheckoutActionCreator","testMode","publicKey","_getScriptURI","paymentId","payment_argument_invalid_error","dispatch","initializePayment","affirm","_initializeCheckout","open","ui","ready","on","window","location","href","links","checkoutLink","loadSettings","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","consigments","consigment","selectedShippingOption","storeCredit","merchant","user_confirmation_url","user_cancel_url","user_confirmation_url_action","shipping","_setShippingAddress","billing","_setBillingAddress","items","_buildItems","discounts","_setDiscounts","metadata","shipping_type","order_id","toString","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","getCart","lineItems","_i","itemType_1","length","line","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","code","discount_amount","discountedAmount","discount_display_name","displayName","_b","_c","AfterpayPaymentStrategy","_checkoutValidator","_paymentMethodActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","loadPaymentMethod","_displayModal","afterpay","countryName","clientToken","display","afterpay_script_loader_SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","scriptURI","loadScript","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","_window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","PaymentMethodCancelledError","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","amount","storeLanguage","currency","offerCredit","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","payment_method_cancelled_error","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","ChasePayEventType","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","event","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","payment_method_invalid_error","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","label","storeName","String","pending","JSON","stringify","setPostalCode","element","masterpassBtn","elementId","style","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFFIRM","affirm_payment_strategy","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","stateOrProvince","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","address_line_1","address_line_2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","removeChild","googlePayButton","createButton","appendChild","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","createElement","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","coupon","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","export interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string,\n        user_cancel_url: string,\n        user_confirmation_url_action?: string,\n        name?: string,\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    discounts: AffirmDiscount;\n    metadata: {\n        shipping_type: string,\n        entity_name?: string,\n        platform_type?: string,\n        webhook_session_id?: string,\n        mode?: string,\n    };\n    order_id?: string;\n    shipping_amount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: Array<[string]>;\n}\n\nexport interface AffirmDiscount {\n    [key: string]: {\n        discount_amount: number,\n        discount_display_name: string,\n    };\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string,\n        last: string,\n        full?: string,\n    };\n    address: {\n        line1: string,\n        line2?: string,\n        city: string,\n        state: string,\n        zipcode: string,\n        country?: string,\n    };\n    phone_number?: string;\n    email?: string;\n}\n\ninterface AffirmScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nexport const SCRIPTS_DEFAULT: AffirmScripts = {\n    PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n};\n","export default Function(`\n'use strict';\nreturn function affirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AffirmAddress, AffirmDiscount, AffirmItem, AffirmRequestData, SCRIPTS_DEFAULT } from './affirm';\nimport affirmJs from './affirmJs';\ndeclare let affirm: any;\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n\n        if (!paymentMethod ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { testMode } = paymentMethod.config;\n        const { publicKey } = paymentMethod.initializationData;\n\n        affirmJs(publicKey, this._getScriptURI(testMode));\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._store.dispatch(this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit }))\n            .then(affirm.checkout(this._initializeCheckout(useStoreCredit)))\n            .then(affirm.checkout.open())\n            .then(affirm.ui.ready(\n                () => {\n                    affirm.ui.error.on('close', () => {\n                        window.location.href = `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=cancelled`;\n                    });\n                }\n            ))\n            .then(() => new Promise<never>(() => {  }));\n\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (affirm) {\n            affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const affirm = state.remoteCheckout.getCheckout('affirm');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!affirm || !affirm.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: affirm.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n    private _initializeCheckout(useStoreCredit: boolean = false): AffirmRequestData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n        const consigments = state.consignments.getConsignments();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!consigments) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const consigment = consigments[0];\n\n        if (!consigment || !consigment.selectedShippingOption) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n        const grandTotal = useStoreCredit ? checkout.grandTotal -  checkout.customer.storeCredit : checkout.grandTotal;\n        const affirmRequestObject: AffirmRequestData = {\n            merchant: {\n                user_confirmation_url: `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=success`,\n                user_cancel_url: `${config.links.checkoutLink}.php?action=set_external_checkout&provider=affirm&status=cancelled`,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._setShippingAddress(),\n            billing: this._setBillingAddress(),\n            items: this._buildItems(),\n            discounts: this._setDiscounts(),\n            metadata: {\n                shipping_type: consigment.selectedShippingOption.type,\n            },\n            order_id: checkout.orderId ? checkout.orderId.toString() : '',\n            shipping_amount: checkout.shippingCostTotal * 100,\n            tax_amount: checkout.taxTotal * 100,\n            total: (grandTotal > 0 ? grandTotal : 0) * 100,\n        };\n\n        return affirmRequestObject;\n    }\n\n    private _setBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _setShippingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n            email: shippingAddress.email || billingAddress.email,\n        };\n\n        return shippingInformation;\n    }\n\n    private _buildItems(): AffirmItem[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const items: AffirmItem[] = [];\n\n        for (const key in cart.lineItems) {\n            if (key) {\n                const itemType = (cart.lineItems as any)[key];\n                for (const line of itemType) {\n                    items.push({\n                        display_name: line.name,\n                        sku: line.sku,\n                        unit_price: line.salePrice,\n                        qty: line.quantity,\n                        item_image_url: line.imageUrl,\n                        item_url: line.url,\n                    });\n                }\n            }\n        }\n\n        return items;\n    }\n\n    private _setDiscounts(): AffirmDiscount {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const discounts: AffirmDiscount = {};\n        for (const line of cart.coupons) {\n            discounts[line.code] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.displayName,\n            };\n        }\n        for (const line of cart.discounts) {\n            discounts[line.id] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.id,\n            };\n        }\n\n        return discounts;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            remoteCheckoutActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}