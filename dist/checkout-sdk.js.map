{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","PaymentMethodActionType","BillingAddressActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","ConfigActionType","BillingAddressActionCreator","_requestSender","continueAsGuest","credentials","options","store","Observable_","observer","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","customer","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","id","then","_a","body","ContinueAsGuestSucceeded","complete","catch","response","error","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","createAddress","DEFAULT_PARAMS","include","join","BillingAddressRequestSender","timeout","url","headers","Accept","content_type","JsonV1","post","params","put","CountryActionCreator","_countryRequestSender","loadCountries","country_action_types","data","CountryRequestSender","_config","Accept-Language","locale","OrderFinalizationNotRequiredError","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","ChasePayEventType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","subtype","MissingPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","event","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpassOptions","_hasPaymentInfo","hasPaymentInfo","_masterpassClientSetup","checkoutCallback","_paymentGateway","_createMasterpassPayload","allowedCardTypes","toFixed","cartId","masterpassClient","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_script_loader","wepay_risk_client","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","CheckoutButtonStrategy","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","tslib__WEBPACK_IMPORTED_MODULE_0__","createError","OrderActionType","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","keys","item","mapToInternalLineItemType","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","createFreezeProxies","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutRequestSender","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","CheckoutActionCreator","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","indexOf","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","lodash__WEBPACK_IMPORTED_MODULE_0__","addressA","addressB","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_teardown","mod","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","_common_error__WEBPACK_IMPORTED_MODULE_5__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","customerStrategyReducer","customer_strategy_actions","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","PaymentMethodInvalidError","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","CouponRequestSender","couponCode","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","PaymentMethodActionCreator","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","containerId","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","appendChild","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","MasterpassCustomerStrategy","Masterpass","_signInButton","parentNode","removeChild","src","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","INTERNAL_USE_ONLY","TimeoutError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","ContentType","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigActionCreator","_configRequestSender","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","isErrorAction","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","getDefaultLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","extendedAddress","locality","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 156);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType\n} from '../../../common/error/errors';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { MasterpassCheckoutCallback, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _paymentGateway?: string;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, masterpass: masterpassOptions } = options;\n\n        if (!masterpassOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because masterpass options is missing');\n        }\n\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        return Promise.resolve(this._hasPaymentInfo()).then(hasPaymentInfo => {\n            if (!hasPaymentInfo) {\n                return this._masterpassClientSetup().then(checkoutCallback => checkoutCallback());\n            }\n\n            this._paymentGateway = masterpassOptions.gateway;\n\n            if (masterpassOptions.onPaymentSelect) {\n                masterpassOptions.onPaymentSelect();\n            }\n        }).then(() => {\n            return super.initialize(options);\n        });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._paymentGateway = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!(payment && payment.paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData } = payment;\n        const methodId = this._paymentGateway;\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId, paymentData })));\n    }\n\n    private _createMasterpassPayload(paymentMethod: PaymentMethod, checkout: Checkout, storeConfig: StoreConfig): MasterpassCheckoutOptions {\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n        };\n    }\n\n    private _hasPaymentInfo(): boolean {\n        return this._paymentMethod\n            && this._paymentMethod.initializationData\n            && this._paymentMethod.initializationData.paymentData\n            && this._paymentMethod.initializationData.paymentData.nonce;\n    }\n\n    private _masterpassClientSetup(): Promise<MasterpassCheckoutCallback> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!(this._paymentMethod && this._paymentMethod.initializationData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const payload = this._createMasterpassPayload(this._paymentMethod, checkout, storeConfig);\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpassClient => () => masterpassClient.checkout(payload));\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CheckoutDefaultIncludes } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\n\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: any\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    MasterpassCustomerStrategy,\n} from './strategies';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n    const scriptLoader = getScriptLoader();\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/observable/empty\");","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}